openapi: "3.1.0"
info:
  title: "Audition API"
  version: "1.0.0"
  contact:
    name: Will Johnson
    email: will@example.com
    url: https://example.com/
tags:
  - name: Actors
    description: Actor related requests
paths:
  /actors:
    get:
      operationId: get_actors
      summary: Get actors, paginated
      tags: [ 'Actors' ]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            description: The page of results to view
            example: 2
        - in: query
          name: search
          schema:
            type: string
          description: The search term to filter results by (case-insensitive)
          example: Bobby
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActorsResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    post:
      operationId: post_actor
      summary: Create actor
      tags: ['Actors']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostActorRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostActorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse415'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /actors/:actor_id:
    get:
      operationId: get_actor
      summary: Get actor by ID
      tags: ['Actors']
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema:
                description: An ETag of the resource
                type: string
                example: 8679287547a1c0a2473947f6828e16b8cc0b7293266a8cbde2a43d1f28adb852
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetActorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    patch:
      operationId: update_actor
      summary: PATCH actor
      tags: ['Actors']
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            required: true
            example: application/json-patch+json
            pattern: ^application\/json\-patch\+json$
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchActorRequest'
      responses:
        '200': 
          description: OK
          headers:
            ETag:
              schema:  
                description: An ETag of the patched resource
                type: string
                example: 8679287547a1c0a2473947f6828e16b8cc0b7293266a8cbde2a43d1f28adb852
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchActorResponse'
        '204':
          description: No Content (not modified)
          headers:
            ETag:
              schema:  
                description: The existing ETag of the unmodified resource
                type: string
                example: 8679287547a1c0a2473947f6828e16b8cc0b7293266a8cbde2a43d1f28adb852
        '400':
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    delete:
      operationId: delete_actor
      summary: DELETE actor
      tags: ['Actors']
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  id:
                    description: The ID of the actor that was deleted
                    type: integer
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /casts:
    post:
      operationId: post_cast
      summary: Create cast assignment
      tags: ['Casts']
      headers:
        Content-Type: application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCastRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCastResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse415'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /casts/movies/:movie_id/actors/:actor_id:
    delete:
      operationId: delete_cast
      summary: Delete cast assignment
      tags: ['Casts']
      responses:
        '200':
          description: OK
          content:
            application/json:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                id:
                  type: string
                  description: A composite ID identifying the cast assignment that was deleted
                  example: 'movie-1-actor-32'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /movies:
    get:
      operationId: get_movies
      summary: Get movies, paginated
      tags: [ 'Movies' ]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            description: The page of results to view
            example: 2
        - in: query
          name: search
          schema:
            type: string
            description: The search term to filter results by (case-insensitive)
            example: Star Wars
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMoviesResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    post:
      operationId: post_movie
      summary: Create movie
      tags: ['Movies']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMovieRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMovieResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse400'
        '415':
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse415'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
  /movies/:movie_id:
    get:
      operationId: get_movies
      summary: Get movie by ID
      tags: ['Movies']
      responses:
        '200':
          description: OK
          headers:
            ETag:
              schema:
                description: An ETag of the resource
                type: string
                example: 8679287547a1c0a2473947f6828e16b8cc0b7293266a8cbde2a43d1f28adb852
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMovieResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    patch:
      operationId: update_movie
      summary: PATCH movie
      tags: ['Movies']
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            required: true
            example: application/json-patch+json
            pattern: ^application\/json\-patch\+json$
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchMovieRequest'
      responses:
        '200': 
          description: OK
          headers:
            ETag:
              schema:  
                description: An ETag of the patched resource
                type: string
                example: 8679287547a1c0a2473947f6828e16b8cc0b7293266a8cbde2a43d1f28adb852
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchMovieResponse'
        '204':
          description: No Content (not modified)
          headers:
            ETag:
              schema:  
                description: The existing ETag of the unmodified resource
                type: string
                example: 8679287547a1c0a2473947f6828e16b8cc0b7293266a8cbde2a43d1f28adb852
        '400':
          description: Bad Request
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ErrorResponse400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
    delete:
      operationId: delete_movie
      summary: DELETE movie
      tags: ['Movies']
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  id:
                    description: The ID of the movie that was deleted
                    type: integer
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse500'
components:
  schemas:
    Actor:
      type: object
      properties:
        age:
          description: Age of the actor
          type: integer
          example: 30
        gender:
          $ref: '#/components/schemas/Gender'
        id:
          description: The ID of the actor
          type: integer
        movies:
          description: A list of movies the actor is cast in
          type: array
          items:
            $ref: '#/components/schemas/ActorWithoutMovies'
          example: [
                    {
                        "genre": "ACTION_AND_ADVENTURE",
                        "id": 1,
                        "posterUrl": None,
                        "releaseDate": "1995-06-30",
                        "title": "Apollo 13",
                    }
                ]
        name:
          description: First name and surname of the actor, separated by a space
          type: string
          example: "John Doe"
        photoUrl:
          description: Location of a photo to display for the actor
          type: string
          example: "https://example.example"
    ActorWithoutMovies:
      type: object
      description: Actor object with movies omitted to prevent circular references
      properties:
        age:
          description: Age of the actor
          type: integer
          example: 30
        gender:
          $ref: '#/components/schemas/Gender'
        id:
          description: The ID of the actor
          type: integer
        name:
          description: First name and surname of the actor, separated by a space
          type: string
          example: "John Doe"
        photoUrl:
          description: Location of a photo to display for the actor
          type: string
          example: "https://example.example"
    ErrorResponse400:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          description: A description of the error
          type: string
          example: Bad Request
    ErrorResponse404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          description: A description of the error
          type: string
          example: Not Found
    ErrorResponse415:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          description: A description of the error
          type: string
          example: Unsupported Media Type
    ErrorResponse500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          description: A description of the error
          type: string
          example: Internal Server Error
    Gender:
      type: string
      description: Gender enum
      enum:
        - MALE
        - FEMALE
    Genre:
      type: string
      description: Genre enum
      enum:
        - ACTION_AND_ADVENTURE
        - ANIMATION
        - COMEDY
        - DOCUMENTARY
        - DRAMA
        - FANTASY
        - HISTORICAL
        - HORROR
        - NOIR
        - SCI_FI
        - WESTERN
    GetActorResponse:
      type: object
      properties:
        success:
          description: Whether or not the request succeeded
          type: boolean
          example: true
        actor:
          description: The actor
          $ref: '#/components/schemas/Actor'
    GetActorsResponse:
      type: object
      properties:
        success:
          description: Whether or not the request succeeded
          type: boolean
          example: true
        actors:
          description: List of actors
          type: array
          items:
            $ref: '#/components/schemas/Actor'
        totalActors:
          description: For pagination. The total number of actors in the system
          type: integer
          example: 20
        offset:
          description: For pagination. The number of actor records skipped in front of the current list returned
          type: integer
    GetMovieResponse:
      type: object
      properties:
        success:
          description: Whether or not the request succeeded
          type: boolean
          example: true
        actor:
          description: The movie
          $ref: '#/components/schemas/Movie'
    GetMoviesResponse:
      type: object
      properties:
        success:
          description: Whether or not the request succeeded
          type: boolean
          example: true
        movies:
          description: List of movies
          type: array
          items:
            $ref: '#/components/schemas/Movie'
        totalMovies:
          description: For pagination. The total number of movies in the system
          type: integer
          example: 20
        offset:
          description: For pagination. The number of movie records skipped in front of the current list returned
          type: integer
    Movie:
      type: object
      properties:
        actors:
          description: A list of actors cast in the movie
          type: array
          items:
            $ref: '#/components/schemas/ActorWithoutMovies'
          example: [
                    {
                        "age": 68,
                        "gender": "MALE",
                        "id": 1,
                        "name": "Tom Hanks",
                        "photoUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/TomHanksJan2009_crop.jpg/640px-TomHanksJan2009_crop.jpg",
                    }
                ]
        genre:
          $ref: '#/components/schemas/Genre'
        id:
          description: The ID of the movie
          type: integer
        posterUrl:
          description: The location of a poster image to display for the movie
          type: string
          example: "https://example.example"
        releaseDate:
          description: ISO-8601 formatted date in the format YYYY-MM-DD
          type: date
          example: "1939-08-25"
        title:
          description: Title of the movie
          type: string
          example: "The Wizard of Oz"
    MovieWithoutActors:
      type: object
      description: Movie with actors omitted to prevent circular references
      properties:
        genre:
          $ref: '#/components/schemas/Genre'
        id:
          description: The ID of the movie
          type: integer
        posterUrl:
          description: The location of a poster image to display for the movie
          type: string
          example: "https://example.example"
        releaseDate:
          description: ISO-8601 formatted date in the format YYYY-MM-DD
          type: date
          example: "1939-08-25"
        title:
          description: Title of the movie
          type: string
          example: "The Wizard of Oz"
    PatchActorRequest:
      type: array
      example: [{"op": "add", "path": "/photoUrl", "value": "https://example.example"}, {"op": "remove", "path": "/gender"}]
      items:
        type: object
        properties:
          op:
            description: String identifying the operation. Only add and remove are used. Add is used always instead of replace.
            type: add | remove
            example: add
          path:
            description: The JSON path to the resource to be added, modified, or removed
            type: string
            example: "/photoUrl"
          value:
            description: For an 'add' operation, the value to apply
            type: string | number
            example: "https://example.example"
    PatchActorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        id:
          description: The ID of the actor that was modified
          type: integer
    PatchMovieRequest:
      type: array
      example: [{"op": "add", "path": "/posterUrl", "value": "https://example.example"}, {"op": "remove", "path": "/releaseDate"}]
      items:
        type: object
        properties:
          op:
            description: String identifying the operation. Only add and remove are used. Add is used always instead of replace.
            type: add | remove
            example: add
          path:
            description: The JSON path to the resource to be added, modified, or removed
            type: string
            example: "/posterUrl"
          value:
            description: For an 'add' operation, the value to apply
            type: string | number
            example: "https://example.example"
    PatchMovieResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        id:
          description: The ID of the movie that was modified
          type: integer
    PostActorRequest:
      type: object
      properties:
        name:
          description: Name of the actor
          type: string
        age:
          description: Age of the actor
          type: integer
        gender:
          description: Gender of the actor
          type: string
          enum:
            - MALE
            - FEMALE
      required:
        - name
        - age
    PostActorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        id:
          description: The id of the actor created
          type: integer
    PostCastRequest:
      type: object
      properties:
        actor_id:
          description: The ID of the actor to be assigned
          type: integer
          example: 32
        movie_id:
          description: The ID of the movie to be assigned
          type: integer  
          example: 1
      required:
        - actor_id
        - movie_id
    PostCastResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        id:
          description: A composite ID representing the movie and actor cast assignment
          type: string
          example: movie-2-actor-31
    PostMovieRequest:
      type: object
      properties:
        genre:
          description: Genre of the movie
          $ref: '#/components/schemas/Genre'
        posterUrl:
          description: The location of a poster image to display for the movie
          type: string
          example: "https://example.example"
        releaseDate:
          description: ISO-8601 formatted date in the format YYYY-MM-DD
          type: date
          example: "1939-08-25"
        title:
          description: Title of the movie
          type: string
          example: "The Wizard of Oz"
      required:
        - title
        - genre
    PostMovieResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        id:
          description: The id of the movie created
          type: integer
